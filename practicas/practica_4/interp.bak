;; Miembros del equipo:
;;
;;  - Cureño Sanchez Misael         418002485
;;  - López Carrillo Alan Ignacio   420014760
;;  - Gonzalez Mancera Ivette       316014490
;;  - Reyes López Eduardo Alfonso   420003681

#lang plai

(require "grammars.rkt")
(require "parser.rkt")


;; Función correspondiente al algoritmo de sustitución
(define (subst expr id-param value)
  (type-case WBAE expr
    [num    (n) (num n)   ]
    [bool   (b) (bool b)  ]
    [chaR   (c) (chaR c)  ]
    [strinG (s) (strinG s)]
    [id (i)
      (if (symbol=? i id-param) value expr)]
    [op (f args)
      (op f
        (map
          (lambda (x) (subst x id-param value))
          args))]
    [lst (l)
      (lst
        (map
          (lambda (x) (subst x id-param value))
          l))]
    [with (bindings body)
        (if (empty? bindings)
          (subst body id-param value)
          (if (symbol=? id-param (binding-id (first bindings)))
            expr
            (with
              (map
                (lambda (x) 
                  (binding (binding-id x) (subst (binding-value x) id-param value)))
                bindings)
              (subst body id-param value))))]
    [with* (bindings body)
      (if (empty? bindings)
          (subst body id-param value)
          (if (symbol=? id-param (binding-id (first bindings)))
            expr
            (with
              (map
                (lambda (x) 
                  (binding (binding-id x) (subst (binding-value x) id-param value)))
                bindings)
              (subst body id-param value))))]))


;; Toma un árbol de sintáxis abstraca del lenguaje WBAE
(define (interp expr)
  (type-case WBAE expr
    [id     (i) (error 'interp "identificador libre")]
    [num    (n) expr]
    [bool   (b) expr]
    [chaR   (c) expr]
    [strinG (s) expr]
    [op     (f args)
      (parse (apply f (map (lambda (x) (get-racket-value (interp x))) args)))]
    [lst    (l)
      (lst (map interp l))]
    [with   (list-bindings body)
      (if (empty? list-bindings)
        (parse (interp body))
        (interp
          (subst
              (with
                (cdr list-bindings)
                body)
              (binding-id    (first list-bindings))
              (binding-value (first list-bindings)))))]
    [with*   (list-bindings body)
      (if (empty? list-bindings)
        (parse (interp body))
        (interp
          (subst
              (with
                (cdr list-bindings)
                body)
              (binding-id    (first list-bindings))
              (binding-value (first list-bindings)))))]))
    ;;[else (error "error")]))


;; Funcion para mapear expresiones WBAE a su correspondiente tipo de racket
;; con la intención de operar sobre esos datos
(define (get-racket-value expr)
  (cond
    [(num? expr)    (num-n    expr)]
    [(bool? expr)   (bool-b   expr)]
    [(chaR? expr)   (chaR-c   expr)]
    [(strinG? expr) (strinG-s expr)]
    [(lst? expr)
      (map get-racket-value (lst-l expr))]
    [else expr]))
